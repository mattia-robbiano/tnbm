import time
import numpy as np
import matplotlib.pyplot as plt

def plot_BS(tn, loss_function, dataset, num_qubits, bond_dimension, iterations, num_images=20, num_columns = 10):
    """
    Plots a grid of sampled binary images generated by a tensor network.
    Args:
        tn (object): Tensor network object with a `sample` method to generate images.
        loss_function (str): Name of the loss function used during training.
        dataset (str): Name of the dataset used for training.
        num_qubits (int): Number of qubits used in the tensor network.
        bond_dimension (int): Bond dimension of the tensor network.
        iterations (int): Number of training iterations performed.
        num_images (int, optional): Number of images to sample and plot. Default is 20.
        num_columns (int, optional): Number of columns in the grid layout. Default is 10.
    Returns:
        None: Displays the plot and saves it as a PDF file.
    Notes:
        - The images are displayed in grayscale with pixel values normalized between 0 and 1.
        - The plot is saved with a filename that includes the loss function, dataset, number of qubits,
          bond dimension, and number of iterations.
    """
    filename = f'samples - {loss_function} - {dataset} - {num_qubits} qubits - bond dim {bond_dimension} - iterations {iterations}'
    seed = int(time.time())
    fig, axes = plt.subplots(2, num_columns, figsize=(15, 6))
    axes = axes.flatten()
    plt.suptitle(filename, fontsize=16)
    plt.tight_layout(rect=[0, 0, 1, 0.95])

    for i, b in enumerate(tn.sample(num_images, seed)):
        arr = np.array(b[0]).reshape(int(np.sqrt(num_qubits)), int(np.sqrt(num_qubits)) )
        axes[i].imshow(arr, cmap='gray', interpolation='nearest',vmin = 0, vmax = 1)
        axes[i].set_title(f'Image {i+1}')

    plt.savefig(filename+".pdf")
